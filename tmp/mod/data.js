{"intl":"","src":"require( 'data', function(exports, module) {  var WS = require(\"tfw.web-service\");\r\nvar Local = require(\"tfw.storage\").local;\r\n\r\n\r\nvar DATA = Local.get( 'data', {} ) || {};\r\n\r\nvar MONTHES = [ 'January', 'February', 'March', 'April',\r\n                'May', 'June', 'July', 'August',\r\n                'September', 'October', 'November', 'December' ];\r\n\r\nexports.get = function( name ) {\r\n    var data = DATA;\r\n    var path = explodePath( name );\r\n    var item;\r\n    var key;\r\n    var i;\r\n    for( i=0 ; i<path.length ; i++ ) {\r\n        item = path[i];        \r\n        data = data[item.name];\r\n        if( typeof data === 'undefined' ) return undefined;\r\n        if( Array.isArray( data ) && item.index ) {\r\n            key = exports.get( item.index );\r\n            data = data.find(function( elem ) {\r\n                return elem.$key == key;\r\n            });\r\n            if( typeof data === 'undefined' ) {\r\n                console.error( 'Key `' + key + \"` not found in `\" + name + \"` at level \" + i + \"!\" );\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\n\r\nexports.set = function( name, value ) {\r\n    checkValueArrays( value );\r\n\r\n    var data = DATA;\r\n    var path = explodePath( name );\r\n    var i;\r\n    for( i=0 ; i<path.length - 1 ; i++ ) {\r\n        if( typeof data[path[i].name] === 'undefined' ) {\r\n            data[path[i].name] = {};\r\n        }\r\n        data = data[path[i].name];\r\n    }\r\n    data[path.pop().name] = value;\r\n};\r\n\r\nexports.reset = function() {\r\n    data = {};\r\n    exports.save();\r\n};\r\n\r\nexports.save = function() {\r\n    Local.set( 'data', DATA );\r\n    /*\r\n     var data = APP.data || {};\r\n     data.id = APP.id;\r\n     console.info(\"[data] data=...\", data);\r\n     WS.get(\r\n     'registration',\r\n     ['set', data ]\r\n     );\r\n     */\r\n};\r\n\r\n\r\nexports.parse = function( input, context ) {\r\n    if( typeof context === 'undefined' ) context = {};\r\n\r\n    if( Array.isArray( input ) ) {\r\n        var i, item, result;\r\n        for (i = 0 ; i < input.length ; i++) {\r\n            item = input[i];\r\n            result = exports.parse( item );\r\n            if( typeof result !== 'undefined' && result !== 'null' ) return result;\r\n        }\r\n    }\r\n    else if( typeof input === 'function' ) {\r\n        return exports.parse( input.call( exports ) );\r\n    }\r\n    else if( typeof input === 'string' ) {\r\n        var cursor = 0;\r\n        var posStart;\r\n        var posEnd;\r\n        var output = '';\r\n        var variable;\r\n        while( true ) {\r\n            posStart = input.indexOf( '{{', cursor );\r\n            if( posStart == -1 ) break;\r\n            output += input.substr( cursor, posStart - cursor );\r\n            cursor = posStart + 2;\r\n            posEnd = input.indexOf( '}}', cursor );\r\n            if( posEnd == -1 ) break;\r\n            variable = input.substr( cursor, posEnd - cursor ).trim().split( '|' );\r\n            if( typeof context[variable[0]] !== 'undefined' ) {\r\n                // This is a frozen var. Used in looping context.\r\n                variable[0] = context[variable[0]];\r\n            } else {\r\n                variable[0] = exports.get( variable[0] ) || '';\r\n            }\r\n            for( i = 1 ; i < variable.length ; i++ ) {\r\n                variable[0] = format( variable[0], variable[i] );\r\n            }\r\n            output += variable[0];\r\n            cursor = posEnd + 2;\r\n        }\r\n        return output + input.substr( cursor );\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n\r\n/**\r\n * Examples of numeric dates are: `20160501`, `201605011830`.\r\n * Time can be added, but just hours and minutes.\r\n */\r\nexports.num2dat = function( num ) {\r\n    var txt = \"\" + num;\r\n    while( txt.length < 12 ) txt += \"0\";\r\n    return new Date(\r\n        parseInt( txt.substr( 0, 4) ),\r\n        parseInt( txt.substr( 4, 2) ) - 1,\r\n        parseInt( txt.substr( 6, 2) ),\r\n        parseInt( txt.substr( 8, 2) ),\r\n        parseInt( txt.substr( 10, 2) ),\r\n        0\r\n    );\r\n};\r\n\r\n\r\nexports.pad = function( value, size, filler ) {\r\n    if( typeof size === 'undefined' ) size = 2;\r\n    if( typeof filler === 'undefined' ) filler = '0';\r\n\r\n    value = \"\" + value;\r\n    while( value.length < size ) value = filler + value;\r\n    return value;\r\n};\r\n\r\n\r\n/**\r\n * Push `value` into an array called `name`.\r\n */\r\nexports.push = function( name, value ) {\r\n    var arr = exports.get( name );\r\n    if( !Array.isArray( arr ) ) {\r\n        console.error( \"[Data.push] `\" + name + \"` is not an array!\" );\r\n        return 0;\r\n    }\r\n    checkValueArrays( arr );\r\n    value.$key = arr.$key++;\r\n    return value.$key;\r\n};\r\n\r\n\r\n\r\n/**\r\n * In  an array,  each item  must have  the `$key'  property. This  is\r\n * needed if you need to remove an element from that list.\r\n * Keys are just  incremenral numbers relative to the  array the items\r\n * belong. So  the array itself has  a `$key` attribute to  store this\r\n * increment.\r\n */\r\nfunction checkValueArrays( value ) {\r\n    if( Array.isArray( value ) ) {\r\n        if( typeof value.$key !== 'number' ) {\r\n            // New ID for elements of this array.\r\n            value.$key = 1;\r\n        }\r\n        value.forEach(function ( item ) {\r\n            if( typeof item.$key !== 'number' ) {\r\n                item.$key = value.$key++;\r\n            }\r\n            checkValueArrays( item );\r\n        });\r\n    }\r\n    else if( typeof value === 'object' ) {\r\n        var key;\r\n        for( key in value ) {\r\n            checkValueArrays( value[key] );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction format( value, type ) {\r\n    switch( type ) {\r\n    case 'date':\r\n        value = exports.num2dat( value );\r\n        return MONTHES[value.getMonth()] + \" \" + value.getDate() + \", \" + value.getFullYear();\r\n    case 'time':\r\n        value = exports.num2dat( value );\r\n        return value.getHours() + \":\" + exports.pad( value.getMinutes() );\r\n    case 'datetime':\r\n        value = exports.num2dat( value );\r\n        return MONTHES[value.getMonth()] + \" \" + value.getDate() + \", \" + value.getFullYear()\r\n            + \"  \" + value.getHours() + \":\" + exports.pad( value.getMinutes() );\r\n    }\r\n    return value;\r\n}\r\n\r\nfunction explodePath( name ) {\r\n    var start = 0;\r\n    var cursor = 0;\r\n    var mode = 0;\r\n    var path = [];\r\n    var pathItem;\r\n    var c;\r\n    \r\n    for( cursor = 0 ; cursor < name.length ; cursor++ ) {\r\n        c = name.charAt( cursor );\r\n        if( mode == 0 ) {\r\n            if( c == '[' || c == '.' ) {\r\n                pathItem = { name: name.substr( start, cursor - start ) };\r\n                path.push( pathItem );\r\n                start = cursor + 1;\r\n                if( c == '[' ) {\r\n                    mode = 1;\r\n                }\r\n            }\r\n        }\r\n        else if( mode == -1 ) {\r\n            // After a `]`, we must find a `.`.\r\n            if( c == '.' ) {\r\n                start = cursor + 1;\r\n                mode = 0;\r\n            }\r\n            else {\r\n                console.error( \"Bad var name!\\n\" + name + \"\\nPos: \" + cursor );\r\n            }\r\n        }\r\n        else {\r\n            if( c == '[' ) {\r\n                mode++;\r\n            }\r\n            else if( c == ']' ) {\r\n                mode--;\r\n                if( mode == 0 ) {\r\n                    pathItem.index = name.substr( start, cursor - start );\r\n                    start = cursor + 1;\r\n                    mode = -1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if( mode == 0 ) {\r\n        path.push( { name: name.substr( start ) } );\r\n    }\r\n    else {\r\n        console.error( \"Bad ending for var name!\\n\" + name );\r\n    }\r\n\r\n    return path;\r\n}\r\n });\r\n","zip":"require(\"data\",function(e,r){function t(e){if(Array.isArray(e))\"number\"!=typeof e.$key&&(e.$key=1),e.forEach(function(r){\"number\"!=typeof r.$key&&(r.$key=e.$key++),t(r)});else if(\"object\"==typeof e){var r;for(r in e)t(e[r])}}function n(r,t){switch(t){case\"date\":return r=e.num2dat(r),s[r.getMonth()]+\" \"+r.getDate()+\", \"+r.getFullYear();case\"time\":return r=e.num2dat(r),r.getHours()+\":\"+e.pad(r.getMinutes());case\"datetime\":return r=e.num2dat(r),s[r.getMonth()]+\" \"+r.getDate()+\", \"+r.getFullYear()+\"  \"+r.getHours()+\":\"+e.pad(r.getMinutes())}return r}function a(e){var r,t,n=0,a=0,u=0,o=[];for(a=0;a<e.length;a++)t=e.charAt(a),0==u?\"[\"!=t&&\".\"!=t||(r={name:e.substr(n,a-n)},o.push(r),n=a+1,\"[\"==t&&(u=1)):-1==u?\".\"==t?(n=a+1,u=0):console.error(\"Bad var name!\\n\"+e+\"\\nPos: \"+a):\"[\"==t?u++:\"]\"==t&&(u--,0==u&&(r.index=e.substr(n,a-n),n=a+1,u=-1));return 0==u?o.push({name:e.substr(n)}):console.error(\"Bad ending for var name!\\n\"+e),o}var u=(require(\"tfw.web-service\"),require(\"tfw.storage\").local),o=u.get(\"data\",{})||{},s=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];e.get=function(r){var t,n,u,s=o,f=a(r);for(u=0;u<f.length;u++){if(t=f[u],s=s[t.name],\"undefined\"==typeof s)return;if(Array.isArray(s)&&t.index&&(n=e.get(t.index),s=s.find(function(e){return e.$key==n}),\"undefined\"==typeof s))return void console.error(\"Key `\"+n+\"` not found in `\"+r+\"` at level \"+u+\"!\")}return s},e.set=function(e,r){t(r);var n,u=o,s=a(e);for(n=0;n<s.length-1;n++)\"undefined\"==typeof u[s[n].name]&&(u[s[n].name]={}),u=u[s[n].name];u[s.pop().name]=r},e.reset=function(){data={},e.save()},e.save=function(){u.set(\"data\",o)},e.parse=function(r,t){if(\"undefined\"==typeof t&&(t={}),Array.isArray(r)){var a,u,o;for(a=0;a<r.length;a++)if(u=r[a],o=e.parse(u),\"undefined\"!=typeof o&&\"null\"!==o)return o}else{if(\"function\"==typeof r)return e.parse(r.call(e));if(\"string\"==typeof r){for(var s,f,i,d=0,y=\"\";;){if(s=r.indexOf(\"{{\",d),-1==s)break;if(y+=r.substr(d,s-d),d=s+2,f=r.indexOf(\"}}\",d),-1==f)break;for(i=r.substr(d,f-d).trim().split(\"|\"),\"undefined\"!=typeof t[i[0]]?i[0]=t[i[0]]:i[0]=e.get(i[0])||\"\",a=1;a<i.length;a++)i[0]=n(i[0],i[a]);y+=i[0],d=f+2}return y+r.substr(d)}}},e.num2dat=function(e){for(var r=\"\"+e;r.length<12;)r+=\"0\";return new Date(parseInt(r.substr(0,4)),parseInt(r.substr(4,2))-1,parseInt(r.substr(6,2)),parseInt(r.substr(8,2)),parseInt(r.substr(10,2)),0)},e.pad=function(e,r,t){for(\"undefined\"==typeof r&&(r=2),\"undefined\"==typeof t&&(t=\"0\"),e=\"\"+e;e.length<r;)e=t+e;return e},e.push=function(r,n){var a=e.get(r);return Array.isArray(a)?(t(a),n.$key=a.$key++,n.$key):(console.error(\"[Data.push] `\"+r+\"` is not an array!\"),0)}});\n//# sourceMappingURL=data.js.map","map":{"version":3,"file":"data.js.map","sources":["data.js"],"sourcesContent":["require( 'data', function(exports, module) {  var WS = require(\"tfw.web-service\");\r\nvar Local = require(\"tfw.storage\").local;\r\n\r\n\r\nvar DATA = Local.get( 'data', {} ) || {};\r\n\r\nvar MONTHES = [ 'January', 'February', 'March', 'April',\r\n                'May', 'June', 'July', 'August',\r\n                'September', 'October', 'November', 'December' ];\r\n\r\nexports.get = function( name ) {\r\n    var data = DATA;\r\n    var path = explodePath( name );\r\n    var item;\r\n    var key;\r\n    var i;\r\n    for( i=0 ; i<path.length ; i++ ) {\r\n        item = path[i];        \r\n        data = data[item.name];\r\n        if( typeof data === 'undefined' ) return undefined;\r\n        if( Array.isArray( data ) && item.index ) {\r\n            key = exports.get( item.index );\r\n            data = data.find(function( elem ) {\r\n                return elem.$key == key;\r\n            });\r\n            if( typeof data === 'undefined' ) {\r\n                console.error( 'Key `' + key + \"` not found in `\" + name + \"` at level \" + i + \"!\" );\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\n\r\nexports.set = function( name, value ) {\r\n    checkValueArrays( value );\r\n\r\n    var data = DATA;\r\n    var path = explodePath( name );\r\n    var i;\r\n    for( i=0 ; i<path.length - 1 ; i++ ) {\r\n        if( typeof data[path[i].name] === 'undefined' ) {\r\n            data[path[i].name] = {};\r\n        }\r\n        data = data[path[i].name];\r\n    }\r\n    data[path.pop().name] = value;\r\n};\r\n\r\nexports.reset = function() {\r\n    data = {};\r\n    exports.save();\r\n};\r\n\r\nexports.save = function() {\r\n    Local.set( 'data', DATA );\r\n    /*\r\n     var data = APP.data || {};\r\n     data.id = APP.id;\r\n     console.info(\"[data] data=...\", data);\r\n     WS.get(\r\n     'registration',\r\n     ['set', data ]\r\n     );\r\n     */\r\n};\r\n\r\n\r\nexports.parse = function( input, context ) {\r\n    if( typeof context === 'undefined' ) context = {};\r\n\r\n    if( Array.isArray( input ) ) {\r\n        var i, item, result;\r\n        for (i = 0 ; i < input.length ; i++) {\r\n            item = input[i];\r\n            result = exports.parse( item );\r\n            if( typeof result !== 'undefined' && result !== 'null' ) return result;\r\n        }\r\n    }\r\n    else if( typeof input === 'function' ) {\r\n        return exports.parse( input.call( exports ) );\r\n    }\r\n    else if( typeof input === 'string' ) {\r\n        var cursor = 0;\r\n        var posStart;\r\n        var posEnd;\r\n        var output = '';\r\n        var variable;\r\n        while( true ) {\r\n            posStart = input.indexOf( '{{', cursor );\r\n            if( posStart == -1 ) break;\r\n            output += input.substr( cursor, posStart - cursor );\r\n            cursor = posStart + 2;\r\n            posEnd = input.indexOf( '}}', cursor );\r\n            if( posEnd == -1 ) break;\r\n            variable = input.substr( cursor, posEnd - cursor ).trim().split( '|' );\r\n            if( typeof context[variable[0]] !== 'undefined' ) {\r\n                // This is a frozen var. Used in looping context.\r\n                variable[0] = context[variable[0]];\r\n            } else {\r\n                variable[0] = exports.get( variable[0] ) || '';\r\n            }\r\n            for( i = 1 ; i < variable.length ; i++ ) {\r\n                variable[0] = format( variable[0], variable[i] );\r\n            }\r\n            output += variable[0];\r\n            cursor = posEnd + 2;\r\n        }\r\n        return output + input.substr( cursor );\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n\r\n/**\r\n * Examples of numeric dates are: `20160501`, `201605011830`.\r\n * Time can be added, but just hours and minutes.\r\n */\r\nexports.num2dat = function( num ) {\r\n    var txt = \"\" + num;\r\n    while( txt.length < 12 ) txt += \"0\";\r\n    return new Date(\r\n        parseInt( txt.substr( 0, 4) ),\r\n        parseInt( txt.substr( 4, 2) ) - 1,\r\n        parseInt( txt.substr( 6, 2) ),\r\n        parseInt( txt.substr( 8, 2) ),\r\n        parseInt( txt.substr( 10, 2) ),\r\n        0\r\n    );\r\n};\r\n\r\n\r\nexports.pad = function( value, size, filler ) {\r\n    if( typeof size === 'undefined' ) size = 2;\r\n    if( typeof filler === 'undefined' ) filler = '0';\r\n\r\n    value = \"\" + value;\r\n    while( value.length < size ) value = filler + value;\r\n    return value;\r\n};\r\n\r\n\r\n/**\r\n * Push `value` into an array called `name`.\r\n */\r\nexports.push = function( name, value ) {\r\n    var arr = exports.get( name );\r\n    if( !Array.isArray( arr ) ) {\r\n        console.error( \"[Data.push] `\" + name + \"` is not an array!\" );\r\n        return 0;\r\n    }\r\n    checkValueArrays( arr );\r\n    value.$key = arr.$key++;\r\n    return value.$key;\r\n};\r\n\r\n\r\n\r\n/**\r\n * In  an array,  each item  must have  the `$key'  property. This  is\r\n * needed if you need to remove an element from that list.\r\n * Keys are just  incremenral numbers relative to the  array the items\r\n * belong. So  the array itself has  a `$key` attribute to  store this\r\n * increment.\r\n */\r\nfunction checkValueArrays( value ) {\r\n    if( Array.isArray( value ) ) {\r\n        if( typeof value.$key !== 'number' ) {\r\n            // New ID for elements of this array.\r\n            value.$key = 1;\r\n        }\r\n        value.forEach(function ( item ) {\r\n            if( typeof item.$key !== 'number' ) {\r\n                item.$key = value.$key++;\r\n            }\r\n            checkValueArrays( item );\r\n        });\r\n    }\r\n    else if( typeof value === 'object' ) {\r\n        var key;\r\n        for( key in value ) {\r\n            checkValueArrays( value[key] );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction format( value, type ) {\r\n    switch( type ) {\r\n    case 'date':\r\n        value = exports.num2dat( value );\r\n        return MONTHES[value.getMonth()] + \" \" + value.getDate() + \", \" + value.getFullYear();\r\n    case 'time':\r\n        value = exports.num2dat( value );\r\n        return value.getHours() + \":\" + exports.pad( value.getMinutes() );\r\n    case 'datetime':\r\n        value = exports.num2dat( value );\r\n        return MONTHES[value.getMonth()] + \" \" + value.getDate() + \", \" + value.getFullYear()\r\n            + \"  \" + value.getHours() + \":\" + exports.pad( value.getMinutes() );\r\n    }\r\n    return value;\r\n}\r\n\r\nfunction explodePath( name ) {\r\n    var start = 0;\r\n    var cursor = 0;\r\n    var mode = 0;\r\n    var path = [];\r\n    var pathItem;\r\n    var c;\r\n    \r\n    for( cursor = 0 ; cursor < name.length ; cursor++ ) {\r\n        c = name.charAt( cursor );\r\n        if( mode == 0 ) {\r\n            if( c == '[' || c == '.' ) {\r\n                pathItem = { name: name.substr( start, cursor - start ) };\r\n                path.push( pathItem );\r\n                start = cursor + 1;\r\n                if( c == '[' ) {\r\n                    mode = 1;\r\n                }\r\n            }\r\n        }\r\n        else if( mode == -1 ) {\r\n            // After a `]`, we must find a `.`.\r\n            if( c == '.' ) {\r\n                start = cursor + 1;\r\n                mode = 0;\r\n            }\r\n            else {\r\n                console.error( \"Bad var name!\\n\" + name + \"\\nPos: \" + cursor );\r\n            }\r\n        }\r\n        else {\r\n            if( c == '[' ) {\r\n                mode++;\r\n            }\r\n            else if( c == ']' ) {\r\n                mode--;\r\n                if( mode == 0 ) {\r\n                    pathItem.index = name.substr( start, cursor - start );\r\n                    start = cursor + 1;\r\n                    mode = -1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if( mode == 0 ) {\r\n        path.push( { name: name.substr( start ) } );\r\n    }\r\n    else {\r\n        console.error( \"Bad ending for var name!\\n\" + name );\r\n    }\r\n\r\n    return path;\r\n}\r\n });\r\n"],"names":["require","exports","module","checkValueArrays","value","Array","isArray","$key","forEach","item","key","format","type","num2dat","MONTHES","getMonth","getDate","getFullYear","getHours","pad","getMinutes","explodePath","name","pathItem","c","start","cursor","mode","path","length","charAt","substr","push","console","error","index","Local","local","DATA","get","i","data","find","elem","set","pop","reset","save","parse","input","context","result","call","posStart","posEnd","variable","output","indexOf","trim","split","num","txt","Date","parseInt","size","filler","arr"],"mappings":"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"},"dependencies":["mod/data","mod/tfw.web-service","mod/tfw.storage"]}